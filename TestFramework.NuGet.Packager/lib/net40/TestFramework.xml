<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TestFramework</name>
  </assembly>
  <members>
    <member name="T:TestFramework.CompositionRootOptions">
      <summary>
            Options for the composition root modules.
            </summary>
    </member>
    <member name="F:TestFramework.CompositionRootOptions.None">
      <summary>
            Indicates that no composition root should be added to the 
            IoC container.
            </summary>
    </member>
    <member name="F:TestFramework.CompositionRootOptions.Default">
      <summary>
            Indicates that the default composition root should be
            added to the IoC container, or if supplied, the one supplied 
            in the <see cref="T:TestFramework.ArrangeActAssert`1" /> constructor.
            </summary>
    </member>
    <member name="T:TestFramework.ArrangeActAssert">
      <summary>
            "Arrange-Act-Assert" a pattern for arranging and formatting code in UnitTest methods.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert" /> class.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.#ctor(Ninject.Modules.INinjectModule)">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert" /> class.
            </summary>
      <param name="module">The module.</param>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.TestSetUp">
      <summary />
    </member>
    <member name="M:TestFramework.ArrangeActAssert.ArrangeAct">
      <summary>
            Steps that are run before each Assert.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.TestCleanup">
      <summary>
            Steps that are run after each Assert.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.Bind(Ninject.Syntax.IBindingRoot)">
      <summary>
            Extension point for sub-classes to bind to the IoC kernel
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.Arrange">
      <summary>
            Arrange all necessary preconditions and inputs. 
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.Act">
      <summary>
            Act on the object or method under test. 
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert.Cleanup">
      <summary>
            Cleans up the environment after the test is verified.
            </summary>
    </member>
    <member name="T:TestFramework.ArrangeActAssert`2">
      <summary>
            "Arrange-Act-Assert" a pattern for arranging and formatting code in UnitTest methods.
            </summary>
      <typeparam name="TSut">The Software/System Under Test</typeparam>
      <typeparam name="TActivationRoot">The activation root for Ninject injection</typeparam>
      <remarks>
            Uses Ninject under the hood to create the SUT
            </remarks>
    </member>
    <member name="T:TestFramework.ArrangeActAssert`1">
      <summary>
            "Arrange-Act-Assert" a pattern for arranging and formatting code in UnitTest methods.
            </summary>
      <typeparam name="TSut">The Software/System Under Test</typeparam>
      <remarks>
            Uses Ninject under the hood to create the SUT
            </remarks>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert`1" /> class.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.#ctor(Ninject.Modules.INinjectModule)">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert`1" /> class.
            </summary>
      <param name="module">The module.</param>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.#ctor(System.Collections.Generic.IEnumerable{Ninject.Modules.INinjectModule})">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert`1" /> class.
            </summary>
      <param name="modules">The modules.</param>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.#ctor(TestFramework.CompositionRootOptions,System.Collections.Generic.IEnumerable{Ninject.Modules.INinjectModule})">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert`1" /> class.
            </summary>
      <param name="modules">The modules.</param>
      <param name="options">The options.</param>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.GetModules(System.Collections.Generic.List{Ninject.Modules.INinjectModule})">
      <summary>
            Extension point for sub-classes to amend, delete or add modules specific
            to their needs
            </summary>
      <param name="item">The collection of Ninject modules.</param>
      <returns>An array of Ninject modules</returns>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.GetKernel">
      <summary>
            Extension point for sub-classes to override the default
            <see cref="T:Ninject.StandardKernel" /> object.
            </summary>
      <returns>An instance of the Ninject Kernel</returns>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.ArrangeAct">
      <summary>
            Steps that are run before each Assert.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.Get``1">
      <summary>
            Gets this instance.
            </summary>
      <typeparam name="T" />
      <returns />
      <exception cref="T:System.InvalidOperationException">Call Arrange before Get{T}</exception>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.TestCleanup">
      <summary>
            Steps that are run after each Assert.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.Arrange(TestFramework.MoqKernel)">
      <summary>
            Arrange all necessary preconditions and inputs. 
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.Act(`0)">
      <summary>
            Act on the software/system under test. 
            </summary>
      <remarks>
            Unit test asserts can access the <param ref="sut" /> using the
            protected <see cref="P:TestFramework.ArrangeActAssert`1.Sut" /> property.
            </remarks>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.Cleanup(`0)">
      <summary>
            Cleans up the environment after the test is verified.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`1.Settings">
      <summary>
            Extension point for sub-classes to add <see cref="T:Ninject.NinjectSettings" /> 
            to this instance
            </summary>
      <returns>Settings that control the underlying IoC container</returns>
    </member>
    <member name="P:TestFramework.ArrangeActAssert`1.Sut">
      <summary>
            The Software Under Test
            </summary>
    </member>
    <member name="P:TestFramework.ArrangeActAssert`1.Kernel">
      <summary>
            Gets the kernel.
            </summary>
    </member>
    <member name="M:TestFramework.ArrangeActAssert`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.ArrangeActAssert`2" /> class.
            </summary>
    </member>
    <member name="T:TestFramework.CompositionRootBase">
      <summary>
            Contains bindings for common objects used within this solution.
            </summary>
      <remarks>
            Expecting sub-classes to implement an activation root for each test assembly.
            </remarks>
    </member>
    <member name="M:TestFramework.CompositionRootBase.Load">
      <summary>
            Loads the module into the kernel.
            </summary>
    </member>
    <member name="T:TestFramework.MoqKernel">
      <summary>
            Wraps the <see cref="T:Ninject.StandardKernel" /> object so that <see cref="T:TestFramework.ArrangeActAssert`1" />
            type can inject instances of the <see cref="T:TestFramework.MockProvider`1" /> type and return the
            mock implementation with one line.
            </summary>
    </member>
    <member name="M:TestFramework.MoqKernel.For(Ninject.StandardKernel)">
      <summary>
            GoF builder for creating instances of this type.
            </summary>
      <param name="item">The item.</param>
      <returns />
    </member>
    <member name="M:TestFramework.MoqKernel.#ctor(Ninject.StandardKernel)">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.MoqKernel" /> class.
            </summary>
      <param name="kernel">The kernel.</param>
    </member>
    <member name="M:TestFramework.MoqKernel.Bind``1">
      <summary>
            Binds this instance.
            </summary>
      <typeparam name="T" />
      <returns />
    </member>
    <member name="M:TestFramework.MoqKernel.Bind``1(``0)">
      <summary>
            Binds the specified item.
            </summary>
      <typeparam name="T" />
      <param name="item">The item.</param>
      <returns>A <see cref="T:Moq.Mock`1" /> created from the <typeparamref name="{T}" /></returns>
    </member>
    <member name="M:TestFramework.MoqKernel.BindMock``1(TestFramework.MockProvider{``0})">
      <summary>
            Binds the specified provider to this instance.
            </summary>
      <typeparam name="T" />
      <param name="provider">The provider.</param>
      <returns>A <see cref="T:Moq.Mock`1" /> created from the <paramref name="provider" /></returns>
    </member>
    <member name="M:TestFramework.MoqKernel.BindMock``1">
      <summary>
            Creates and adds a <typeparamref name="{T}" /> object and returns a <see cref="T:Moq.Mock`1" /></summary>
      <typeparam name="T" />
      <returns>A <see cref="T:Moq.Mock`1" /> created from the <typeparamref name="{T}" /></returns>
      <remarks>
            Test double - Dummy
            </remarks>
    </member>
    <member name="M:TestFramework.MoqKernel.BindMock``1(System.Action{Moq.Mock{``0}})">
      <summary>
            Adds the specified behaviour.
            </summary>
      <typeparam name="T" />
      <param name="behaviour">The behaviour that the mock object exhibits.</param>
      <returns>A <see cref="T:Moq.Mock`1" /> created from the <typeparamref name="{T}" /></returns>
    </member>
    <member name="M:TestFramework.MoqKernel.Get``1">
      <summary>
            Gets an instance of the specified service.
            </summary>
      <typeparam name="T" />
      <returns />
    </member>
    <member name="M:TestFramework.MoqKernel.Get``1(System.Int32)">
      <summary>
            Gets a collection of the specified service.
            </summary>
      <typeparam name="T" />
      <param name="count">The number of specified services.</param>
      <returns>A collection of specified services</returns>
    </member>
    <member name="T:TestFramework.MockProvider`1">
      <summary>
            An <see cref="T:Ninject.Activation.IProvider`1" /> implementation that creates and adds <see cref="T:TestFramework.MockProvider`1" />
            mocked objects into the IoC container.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:TestFramework.MockProvider`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.MockProvider`1" /> class.
            </summary>
    </member>
    <member name="M:TestFramework.MockProvider`1.#ctor(System.Action{Moq.Mock{`0}})">
      <summary>
            Initializes a new instance of the <see cref="T:TestFramework.MockProvider`1" /> class.
            </summary>
      <param name="behaviour">The behaviour.</param>
    </member>
    <member name="M:TestFramework.MockProvider`1.Create(Ninject.Activation.IContext)">
      <summary>
            Creates an instance within the specified context.
            </summary>
      <param name="context">The context.</param>
      <returns>
            The created instance.
            </returns>
    </member>
    <member name="P:TestFramework.MockProvider`1.Mock">
      <summary>
            Gets the mock object created by this instance.
            </summary>
      <value>
            The mock object set with any behaviours specified.
            </value>
    </member>
    <member name="P:TestFramework.MockProvider`1.Type">
      <summary>
            Gets the type (or prototype) of instances the provider creates.
            </summary>
    </member>
    <member name="T:TestFramework.AssertAttribute">
      <summary />
    </member>
  </members>
</doc>